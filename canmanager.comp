component canmanager;

// DS302 boot completed
pin out bit boot_complete   """DS302 boot completed""";


// we are creating the pins / params manually. The above is just so that comp will shut up about "you must have at least one pin"
// might be easier to convert to straight C and be done with it

option extra_setup;
option extra_cleanup;
//option constructable no;
// we can only have ONE instance of this.
option singleton yes;

function update fp;

license "GPLv3";
author "Gabriel Curteanu"; 
;;

#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <canfestival.h>
#include "EPOScontrol.h"
#include "epos.h"
#include "ds302.h"
#include "eposconfig.h"

// 1ms for fault recovery? Bit low
#define MAX_RECOVERY_NS 5000

int slaveid[EPOS_MAX_DRIVES] = { 0, 0, 0, 0, 0 };
RTAPI_MP_ARRAY_INT(slaveid,EPOS_MAX_DRIVES,"CAN slave IDs controlled by this master");
int heartbeat[EPOS_MAX_DRIVES] = { 0, 0, 0, 0, 0 };
RTAPI_MP_ARRAY_INT(heartbeat,EPOS_MAX_DRIVES,"The heartbeat values for each slave ID");
int master_can_id = 0x7F;
RTAPI_MP_INT(master_can_id,"The master's CAN ID");
char *dcf = NULL;
RTAPI_MP_STRING(dcf, "The DCF initialisation data file");

typedef enum {
    Disabled        = 0x00, // default state. External/Internal
    ExtFaulted      = 0x01, // External Fault (CAN/device)
    IntFaulted      = 0x02, // Internal Fault (component)
    Enabled         = 0x03, // External/Internal
    Disabling       = 0x10, // Internal
    ExtFaultRecovery= 0x11, // External
    IntFaultRecovery= 0x12, // Internal
    Enabling        = 0x13, // Internal
} enstate_t;

static const char * state_to_text (enstate_t state) {

    switch (state) {
        case Disabled: return "Disabled";
        case ExtFaulted: return "ExtFaulted";
        case IntFaulted: return "IntFaulted";
        case Enabled: return "Enabled";
        case Disabling: return "Disabling";
        case ExtFaultRecovery: return "ExtFaultRecovery";
        case IntFaultRecovery: return "IntFaultRecovery";
        case Enabling: return "Enabling";
        default: return "(unknown)";
    }
}

/* 
 * The state translation table, based on previous state and detected current state
 * This is using in enable/disable/fault clearing/fault detection of the drives
 */
enstate_t   state_matrix[16][3] = {
// current state, detected state, new state
{Disabled,          ExtFaulted,     ExtFaulted},
{Disabled,          Enabled,        IntFaulted},
{ExtFaulted,        Disabled,       Disabled},
{ExtFaulted,        Enabled,        Enabled},
{IntFaulted,        ExtFaulted,     ExtFaulted},
{ExtFaultRecovery,  Disabled,       Disabled},
{ExtFaultRecovery,  Enabled,        Enabled},
{IntFaultRecovery,  Disabled,       Disabled},
{IntFaultRecovery,  ExtFaulted,     ExtFaulted},
{IntFaultRecovery,  Enabled,        Enabled},
{Enabled,           Disabled,       IntFaulted},
{Enabled,           ExtFaulted,     ExtFaulted},
{Enabling,          ExtFaulted,     ExtFaulted},
{Enabling,          Enabled,        Enabled},
{Disabling,         Disabled,       Disabled},
{Disabling,         ExtFaulted,     ExtFaulted},
};

typedef enum {
    Level   = 0x00, // default state
    Rising  = 0x01,
    Falling = 0x02,
} edge_t;

typedef struct {
    // params
    hal_u32_t   slavecount;                             // slave count, out
    hal_u32_t   slave_id[EPOS_MAX_DRIVES];              // slave ID, out
    hal_float_t position_scale[EPOS_MAX_DRIVES];        // position scale, in
    // pins
    hal_bit_t   *enable[EPOS_MAX_DRIVES];               // enable, input
    hal_bit_t   *faulted[EPOS_MAX_DRIVES];              // fault, out
    hal_s32_t   *command_mode[EPOS_MAX_DRIVES];         // mode of operation, input
    hal_float_t *position_command[EPOS_MAX_DRIVES];     // position command, input
    hal_float_t *velocity_command[EPOS_MAX_DRIVES];     // velocity command, input
    hal_float_t *position_feedback[EPOS_MAX_DRIVES];    // position feedback, output
    hal_float_t *velocity_feedback[EPOS_MAX_DRIVES];    // velocity feedback, output
    hal_s32_t   *position_counts[EPOS_MAX_DRIVES];      // position counts, output
    
    // internal data
    hal_bit_t   prev_enabled[EPOS_MAX_DRIVES];          // previous enabled state for edge detect
    edge_t      enable_edges[EPOS_MAX_DRIVES];          // edge detector for enable
    enstate_t   currentstate[EPOS_MAX_DRIVES];          // the drive state, used to control enable/disable and fault control
    uint64_t    laststatechange[EPOS_MAX_DRIVES];       // last time the state was changed           
} canmanager_t;

static canmanager_t *canmanager;

//Global variables
CO_Data EPOScontrol_Data;

//RTDM library handle
void *rtdm_lib_handle;
void *pthread_lib_handle;

//Variables for the setup or in terms of CANOpen Initialisation of the master.

char* LibraryPath="/usr/local/lib/libcanfestival_can_socket.so";
s_BOARD MasterBoard = {"0", "1M"};

/* callbacks kept mostly for debugging */
/* Beware, DS302 overrides some of them */

void CanManager_heartbeatError(CO_Data* d, UNS8 heartbeatID)
{
    rtapi_print("CANmanager: CB heartbeatError %02x\n", heartbeatID);
    // only print such messages after the boot is done (we are started)
    if (ds302_status(&EPOScontrol_Data) != BootRunning)
        rtapi_print_msg (RTAPI_MSG_ERR, "CAN ID %02x heartbeat missing", heartbeatID);
}

void CanManager_initialisation(CO_Data* d)
{
    rtapi_print("CANmanager: CB initialization\n");
}

void CanManager_preOperational(CO_Data* d)
{
    rtapi_print("CANmanager: CB preOperational mode \n");
}

void CanManager_operational(CO_Data* d)
{
    rtapi_print("CANmanager: CB operational\n");
}

void CanManager_stopped(CO_Data* d)
{
    rtapi_print("CANmanager: CB stopped\n");
}

void CanManager_post_sync(CO_Data* d)
{
    rtapi_print("CANmanager: CB SYNC\n");
}

void CanManager_post_TPDO(CO_Data* d)
{
    rtapi_print("CANmanager: CB TPDO\n");    
}

void CanManager_post_SlaveBootup(CO_Data* d, UNS8 nodeid)
{
    rtapi_print("CANmanager: CB SlaveBootup %02x\n", nodeid);
}

void CanManager_post_SlaveStateChange(CO_Data* d, UNS8 nodeid,  e_nodeState newNodeState)
{
    rtapi_print("CANmanager: CB SlaveStateChange %02x -> %02x\n", nodeid, newNodeState);
    // only print such messages after the boot is done (we are started)
    if (ds302_status(&EPOScontrol_Data) != BootRunning)
        rtapi_print_msg (RTAPI_MSG_ERR, "CAN ID %02x state : %s", nodeid, ds301_nmt_to_text(newNodeState));
}

/***************************  INIT  *****************************************/
void InitNodes(CO_Data* d, UNS32 id)
{
    setState(&EPOScontrol_Data, Initialisation);
}

/***************************  EXIT  *****************************************/
void Exit(CO_Data* d, UNS32 id)
{
    // is this needed? disable for now
    // masterSendNMTstateChange(&EPOScontrol_Data, master_can_id, NMT_Stop_Node);

    //Stop master
    setState(&EPOScontrol_Data, Stopped);
}

int     setup_pins (const char *prefix) {
    
    int     retcode;
    int     i;
    
    // the slave count is per instance
    retcode = hal_param_u32_newf (HAL_RO, &canmanager->slavecount, comp_id,
        "%s.slave-count", prefix);
    if (retcode != 0) { return retcode; }
    
    for (i = 0; i < canmanager->slavecount; i++) {

        // the state pins, enable and faulted
        retcode = hal_pin_bit_newf(HAL_IN, &canmanager->enable[i], comp_id,
        "%s.%d.enable", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_pin_bit_newf(HAL_OUT, &canmanager->faulted[i], comp_id,
        "%s.%d.faulted", prefix, i);
        if (retcode != 0) { return retcode; }
        
        // command mode
        retcode = hal_pin_s32_newf(HAL_IN, &canmanager->command_mode[i], comp_id,
        "%s.%d.command-mode", prefix, i);
        if (retcode != 0) { return retcode; }

        // raw encoder count
        retcode = hal_pin_s32_newf(HAL_OUT, &canmanager->position_counts[i], comp_id,
        "%s.%d.counts", prefix, i);
        if (retcode != 0) { return retcode; }

        // position command and feedback in units
        retcode = hal_pin_float_newf(HAL_IN, &canmanager->position_command[i], comp_id,
        "%s.%d.position-cmd", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_pin_float_newf(HAL_OUT, &canmanager->position_feedback[i], comp_id,  
        "%s.%d.position-fb", prefix, i);
        if (retcode != 0) { return retcode; }

        // velocity command and feedback in units
        retcode = hal_pin_float_newf(HAL_IN, &canmanager->velocity_command[i], comp_id,
        "%s.%d.velocity-cmd", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_pin_float_newf(HAL_OUT, &canmanager->velocity_feedback[i], comp_id,  
        "%s.%d.velocity-fb", prefix, i);
        if (retcode != 0) { return retcode; }

        // params
        retcode = hal_param_u32_newf (HAL_RO, &canmanager->slave_id[i], comp_id,
        "%s.%d.slave-id", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_param_float_newf (HAL_RW, &canmanager->position_scale[i], comp_id,
        "%s.%d.position-scale", prefix, i);
        if (retcode != 0) { return retcode; }

        // setup default values
        canmanager->position_scale[i] = 1;
        canmanager->prev_enabled[i] = 0;
    }

    return 0;
}

EXTRA_SETUP()
{
    if (!dcf) {
        rtapi_print ("CANmanager: DCF file not provided, unable to load\n");
        return 1;
    }

    canmanager = hal_malloc(sizeof(canmanager_t));
    if (!canmanager)
        return 1;

    // load the params
    int i;
    for (i = 0; i < EPOS_MAX_DRIVES; i++)
        if (slaveid[i] != 0) {
            canmanager->slave_id[canmanager->slavecount++] = slaveid[i];
        }


    // comp_id = already set
    // prefix = the component prefix
    //rtapi_print ("Component ID is %d\n", comp_id);

    // create the pins
    int retcode = setup_pins(prefix);
    if (retcode != 0)
        return retcode;

    //rtapi_print ("CANmanager: Load libpthread_rt.so\n");
    pthread_lib_handle = dlopen ("libpthread_rt.so", RTLD_NOW | RTLD_GLOBAL);
    if (!pthread_lib_handle) {
        rtapi_print ("CANmanager: pthread_rt load failed\n");
        return 1;
    }

    //rtapi_print ("CANmanager: Loading librtdm.so\n");
    rtdm_lib_handle = dlopen ("/usr/lib/librtdm.so", RTLD_NOW | RTLD_GLOBAL);
    if (!rtdm_lib_handle) {
        rtapi_print ("CANmanager: RTDM load failed\n");
        return 1;
    }

    //rtapi_print ("CANmanager: Timers initialized\n");
    TimerInit();

    //rtapi_print ("CANmanager: Loading the driver\n");
    LoadCanDriver(LibraryPath);
                
    if(!canOpen(&MasterBoard,&EPOScontrol_Data)){
        rtapi_print("CANmanager: Cannot open CAN board\n");
    }
    else{
        //rtapi_print("CANmanager: Opened CAN board\n");
    }

    // Set the master ID
    setNodeId(&EPOScontrol_Data, master_can_id);

    // initialize the master
    epos_initialize_master (&EPOScontrol_Data, dcf);
    //display_dcf_set (&EPOS_drive.dcf_data);
    
    // add the defined slave nodeids
    for (i = 0; i < canmanager->slavecount; i++) {
        rtapi_print ("CANmanager: Adding slave id %02x\n", canmanager->slave_id[i]);
        epos_add_slave (canmanager->slave_id[i]);
    }

    // load the DCF configuration for the master node before starting the timers and such
    ds302_load_dcf_local (&EPOScontrol_Data);

    // set up callbacks
    EPOScontrol_Data.heartbeatError = CanManager_heartbeatError;
    EPOScontrol_Data.initialisation = CanManager_initialisation;
    EPOScontrol_Data.preOperational = CanManager_preOperational;
    EPOScontrol_Data.operational = CanManager_operational;
    EPOScontrol_Data.stopped = CanManager_stopped;
    EPOScontrol_Data.post_sync = CanManager_post_sync;
    EPOScontrol_Data.post_TPDO = CanManager_post_TPDO;
    EPOScontrol_Data.post_SlaveBootup = CanManager_post_SlaveBootup;
    EPOScontrol_Data.post_SlaveStateChange = CanManager_post_SlaveStateChange;
    
    // Start timer thread
    StartTimerLoop(&InitNodes);

    // Init DS302 process
    ds302_init (&EPOScontrol_Data);

    EPOS_WARN("CANmanager: 302 initialized\n");

    // kickoff DS302 boot process
    EnterMutex();
    ds302_start (&EPOScontrol_Data);
    LeaveMutex();

    // add the defined slave node IDs to the heartbeat consumer
    for (i = 0; i < canmanager->slavecount; i++) {
        if (heartbeat[i] > 0) {
            rtapi_print ("CANmanager: Starting HB for slave id %02x with a %d ms\n", canmanager->slave_id[i], heartbeat[i]);
            ds302_setHeartbeat (&EPOScontrol_Data, canmanager->slave_id[i], heartbeat[i]);
        }
    }

    // set the inital drive states
    for (i = 0; i < canmanager->slavecount; i++) {
        canmanager->currentstate[i] = Disabled;
        canmanager->laststatechange[i] = 0;
    } 

    rtapi_print("CANmanager: finished initialization.\n");

    return 0;
}


EXTRA_CLEANUP()
{
    int     i;

    // disable the drives
    for (i = 0; i < canmanager->slavecount ; i++) {
        // disable the drive
        if (epos_drive_operational(i)) {
            epos_disable_drive (i);
        }
    }

    EnterMutex();
    sendPDOevent(&EPOScontrol_Data);
    LeaveMutex();
    
    // put the master into pre-op
    setState (&EPOScontrol_Data, Pre_operational);

    // stop the threads and stop the master
    StopTimerLoop(&Exit);

    canClose(&EPOScontrol_Data);
    
    TimerCleanup();

    if (rtdm_lib_handle)
        dlclose (rtdm_lib_handle);
    
    if (pthread_lib_handle)
        dlclose (pthread_lib_handle);


    rtapi_print ("CANmanager: stopped and unloaded\n");
}

/*
    Edge detector for enable signals
*/
void    edge_detect () {

    int     i;
    for (i = 0; i < canmanager->slavecount ; i++) {
        if (*(canmanager->enable[i]) != canmanager->prev_enabled[i]) {
            if (*(canmanager->enable[i]) == 0)
                canmanager->enable_edges[i] = Falling;
            else
                canmanager->enable_edges[i] = Rising;
        } else
            canmanager->enable_edges[i] = Level;

        canmanager->prev_enabled[i] = *(canmanager->enable[i]);
    }
}

/*
    This does the state transitions for the drive
*/
void    update_states (int idx) {

    enstate_t   nodestate = Disabled;
    // gather the current state
    if (ds302_node_healthy(&EPOScontrol_Data, canmanager->slave_id[idx])) {
        // node is ok at 302 level (NMT, boot, errors)
        if (epos_drive_operational(idx))
            nodestate = Enabled;
        else if (epos_drive_faulted(idx))
            nodestate = ExtFaulted;
    } else
        nodestate = ExtFaulted;

    // we have the current state (Disabled/Enabled/Faulted). Compare against previous and take action

    // do the state changes if needed
    int     i;
    for (i = 0; i < 16; i++) {
        if (canmanager->currentstate[idx] == state_matrix[i][0] && nodestate == state_matrix[i][1]) {
            EPOS_WARN ("Internal state change from %s to %s (node %d)\n", state_to_text(canmanager->currentstate[idx]), state_to_text(state_matrix[i][2]), idx);
            canmanager->currentstate[idx] = state_matrix[i][2];
            // mark the time
            canmanager->laststatechange[idx] = rtuClock();
        }
    }
}

void    set_enable_state (int idx) {

    // this checks the current state and the enable signal to take the proper actions
    // at this point we have all the possible states in the current state

    // it's good in the current state based on level?
    if (canmanager->currentstate[idx] == Enabled && *(canmanager->enable[idx]) != 0)
        return;
    if (canmanager->currentstate[idx] == Disabled && *(canmanager->enable[idx]) == 0)
        return;

    // we need to do something to go to the proper state
    // from Disabled to Enabled
    // from Enabled to Disabled
    // from Faulted to FaultRecovery (if needed)

    switch (canmanager->currentstate[idx]) {
        case Disabled:
            // start the node regardless of edge. If we are here it means the enable is ON
            EPOS_WARN("enabling drive %d\n", idx);
            epos_enable_drive (idx);
            canmanager->currentstate[idx] = Enabling;
            canmanager->laststatechange[idx] = rtuClock();
            break;
        case Enabled:
            // disable the node regardless of edge. If we are here it means the enable is OFF
            EPOS_WARN("disabling drive %d\n", idx);
            epos_disable_drive (idx);
            canmanager->currentstate[idx] = Disabling;
            canmanager->laststatechange[idx] = rtuClock();
            break;
        case ExtFaulted:
            // do fault recovery on a rising edge
            // there are two scenarios
            // 1. a device level fault signalled via EMCY
            // 2. a CAN level fault (device no longer in OP for example)
            // treatment is different
            // if all that's wrong is an EMCY event, then use the clear fault method
            // if there's more to it, do a node reset (it WILL fail on the first try to enable due to the time it takes)
            if(canmanager->enable_edges[idx] == Rising) {
                if (ds302_get_error_count(canmanager->slave_id[idx]) > 0) {
                    // we have soft errors present, do fault reset via the ControlWord
                    EPOS_WARN("fault recovery for %d using fault reset\n", idx);
                    epos_fault_reset (idx);
                } else {
                    // we have hardware errors, reset the node
                    EPOS_WARN("fault recovery for %d using a node reset\n", idx);
                    EnterMutex();
                    masterSendNMTstateChange (&EPOScontrol_Data, canmanager->slave_id[idx], NMT_Reset_Comunication);
                    LeaveMutex();
                }
                canmanager->currentstate[idx] = ExtFaultRecovery;
                canmanager->laststatechange[idx] = rtuClock();
            }
            break;
        case IntFaulted:
            // do fault recovery on a rising edge
            if(canmanager->enable_edges[idx] == Rising) {
                EPOS_WARN("fault recovery for %d\n", idx);
                canmanager->currentstate[idx] = IntFaultRecovery;
                canmanager->laststatechange[idx] = rtuClock();
            }
            break; 
        case Enabling:
            // do a stop on a falling edge
            if(canmanager->enable_edges[idx] == Falling) {
                EPOS_WARN("disabling an enabling drive %d\n", idx);
                epos_disable_drive (idx);
                canmanager->currentstate[idx] = Disabling;
                canmanager->laststatechange[idx] = rtuClock();
            } else {
                // verify how long we've been in this state
                if ((rtuClock() - canmanager->laststatechange[idx]) > MAX_RECOVERY_NS) {
                    EPOS_WARN("drive %d in Enabling for more than the max time\n", idx);
                    canmanager->currentstate[idx] = IntFaulted;
                    canmanager->laststatechange[idx] = rtuClock();
                }
            }
            break;
        case Disabling:
            // do a start on a rising edge
            if(canmanager->enable_edges[idx] == Rising) {
                EPOS_WARN("enabling an disabling drive %d\n", idx);
                epos_enable_drive (idx);
                canmanager->currentstate[idx] = Enabling;
                canmanager->laststatechange[idx] = rtuClock();
            } else {
                // verify how long we've been in this state
                if ((rtuClock() - canmanager->laststatechange[idx]) > MAX_RECOVERY_NS) {
                    EPOS_WARN("drive %d in Disabling for more than the max time\n", idx);
                    canmanager->currentstate[idx] = IntFaulted;
                    canmanager->laststatechange[idx] = rtuClock();
                }
            }
            break;
        case IntFaultRecovery:
        case ExtFaultRecovery:
            // verify how long we've been in this state
            if ((rtuClock() - canmanager->laststatechange[idx]) > MAX_RECOVERY_NS) {
                EPOS_WARN("drive %d in Fault Recovery for more than the max time\n", idx);
                canmanager->currentstate[idx] = IntFaulted;
                canmanager->laststatechange[idx] = rtuClock();
            }
            break;
    }

    // set the fault signal
    if (canmanager->currentstate[idx] == ExtFaulted || canmanager->currentstate[idx] == IntFaulted)
        *(canmanager->faulted[idx]) = 1;
    else
        *(canmanager->faulted[idx]) = 0;
}

static int  boot_failure_printed = 0;

FUNCTION(update) 
{
    int     i;
    //rtapi_print ("update called\n");

    edge_detect();

    // do drive startup after the manager completed boot
    // this should fire only once, as boot completes
    if (boot_complete == 0 && ds302_status(&EPOScontrol_Data) == BootCompleted) {
            // set the boot complete param
            boot_complete = 1;

            // this probably will have to rely on module params/config?
            rtapi_print ("CANmanager: Setting drive params\n");
            EnterMutex();
            
            for (i = 0; i < canmanager->slavecount; i++) {
                // set default operation mode
                // epos_set_mode (i, EPOS_MODE_PPM);
            
                // set motion type, segmented or continuous
                epos_set_continuous (i);
                //epos_set_segmented(i);
            
                // set values as absolute
                epos_set_absolute (i);
            
                // set execution for commands
                epos_execute (i);

                // enable the drive
                // epos_enable_drive (i);   // we now control the enable via the enable pin
            }

            // load values to the drive via PDO (note, above routines are LOCAL)
            sendPDOevent(&EPOScontrol_Data);
            LeaveMutex();
            
    } else if (ds302_status(&EPOScontrol_Data) != BootCompleted) {
        // boot is still in progress / not done
        // let's update the boot status for each system


        // DO NOT continue to do work if boot is incomplete!
        if (boot_failure_printed == 0 && ds302_status(&EPOScontrol_Data) == BootTimedOut) {
            rtapi_print_msg (RTAPI_MSG_ERR, "Boot timed out, can not continue");
            boot_failure_printed = 1;
        } else if (boot_failure_printed == 0 && ds302_status(&EPOScontrol_Data) == BootError) {
            rtapi_print_msg (RTAPI_MSG_ERR, "Boot completed with errors, can not continue");
            boot_failure_printed = 1;
        }
        return;
    }

    /*
     * This is the main processing section
     * It does enable/fault
     * It processes the commands and provides the results
     *
     * NOTE: all WRITE calls to the CAN stack MUST use mutexes (EnterMutex/LeaveMutex)
     * NOTE: for READ calls to the CAN stack, we should be fine without mutexes (if calls short)
     *
     */
    
    // one optimization idea: after the loop is done, do a SINGLE call to sendPDO
    // this will reduce the amount of locking/unlocking

    // drive state / fault detection & recovery
    for (i = 0; i < canmanager->slavecount ; i++) {
        update_states (i);
        set_enable_state (i);
    }

    for (i = 0; i < canmanager->slavecount ; i++) {

        // position / speed handling
        // only do this when the current state is Enabled
        // do not send updates to disabled drives
        if (canmanager->currentstate[i] == Enabled) {

            switch (*(canmanager->command_mode[i])) {

                case EPOS_MODE_PPM: // Profile Position Mode
                    {
                        epos_set_mode (i, EPOS_MODE_PPM);

                        // calculate target position
                        hal_s32_t   demandpos = (hal_s32_t)(*(canmanager->position_command[i]) * canmanager->position_scale[i]);
                        // do motion (we can base comparison on the OD object directly)
                        if (demandpos != PositionDemandValue[i]) {
                            // new move required
                            // rtapi_print ("CANmanager: Executing move to %ld from %ld [%d]\n", demandpos, PositionDemandValue[i], i);

                            epos_do_move_PPM(i, demandpos);
                            // if the move succeeds, it will update the PositionDemandValue with the param value
                            // this way, we'll re-execute the move automatically if for whatever reason was not executed
                        }
                    }; break;

                case EPOS_MODE_PVM: // Profile Velocity Mode
                    {
                        epos_set_mode (i, EPOS_MODE_PVM);

                    }; break;

                case EPOS_MODE_POS: // Direct Position Mode
                    {
                        epos_set_mode (i, EPOS_MODE_POS);

                        // set target position
                        PositionDemandValue[i] = (INTEGER32)(*(canmanager->position_command[i]) * canmanager->position_scale[i]);

                    }; break;

                case EPOS_MODE_VEL: // Direct Velocity Mode
                    {
                        epos_set_mode (i, EPOS_MODE_VEL);

                    }; break;

                default:
                    // invalid mode, raise error & fault
                    rtapi_print_msg (RTAPI_MSG_ERR, "Invalid command mode %ld", *(canmanager->command_mode[i]));
                    canmanager->currentstate[i] = IntFaulted;
                    canmanager->laststatechange[i] = rtuClock();
            }
            // load the feedback value
            *(canmanager->position_counts[i]) = PositionActualValue[i];
            // calculate position in units
            *(canmanager->position_feedback[i]) = *(canmanager->position_counts[i]) / canmanager->position_scale[i];
        }
    }

    // generate the PDOs. This is the ONLY lock needed
    EnterMutex();
    sendPDOevent(&EPOScontrol_Data);
    LeaveMutex();
}
