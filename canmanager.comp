component canmanager;

// DS302 boot completed
pin out bit boot_complete   """DS302 boot completed""";


//pin in s32 #.pin_position_cmd[5]  """Position command""";
//pin in s32 #.pin_velocity_cmd[5]  """Velocity command""";
//pin out s32 #.pin_position_fb[5]  """Position feedback""";
//pin out s32 #.pin_velocity_fb[5]  """Velocity feedback""";

option extra_setup;
option extra_cleanup;
//option constructable no;
// we can only have ONE instance of this.
option singleton yes;

function update fp;

license "GPLv3";
author "Gabriel Curteanu"; 
;;

#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <canfestival.h>
#include "EPOScontrol.h"
#include "epos.h"
#include "ds302.h"
#include "eposconfig.h"

#define NMT_MASTER_NODE     0x7F

int slaveid[EPOS_MAX_DRIVES] = { 0, 0, 0, 0, 0 };
RTAPI_MP_ARRAY_INT(slaveid,EPOS_MAX_DRIVES,"CAN slave IDs controlled by this master");
int master_can_id = 0x7F;
RTAPI_MP_INT(master_can_id,"The master's CAN ID");
char *dcf = NULL;
RTAPI_MP_STRING(dcf, "The DCF initialisation data");

typedef struct {
    hal_u32_t   slavecount;
    hal_u32_t   slave_id[EPOS_MAX_DRIVES];
    hal_float_t position_scale[EPOS_MAX_DRIVES];
    hal_float_t *position_command[EPOS_MAX_DRIVES];
    hal_float_t *position_feedback[EPOS_MAX_DRIVES];
    hal_s32_t   *position_counts[EPOS_MAX_DRIVES];
} canmanager_t;

static canmanager_t *canmanager;

//Global variables
CO_Data EPOScontrol_Data;

//RTDM library handle
void *rtdm_lib_handle;
void *pthread_lib_handle;

//Variables for the setup or in terms of CANOpen Initialisation of the master.

char* LibraryPath="/usr/local/lib/libcanfestival_can_socket.so";
s_BOARD MasterBoard = {"0", "1M"};

void CanManager_heartbeatError(CO_Data* d, UNS8 heartbeatID)
{
    rtapi_print("CanManager_heartbeatError %d\n", heartbeatID);
}

void CanManager_initialisation(CO_Data* d)
{
    rtapi_print("CanManager initializing\n");
}

void CanManager_preOperational(CO_Data* d)
{
    rtapi_print("CanManager is in preOperational mode \n");
}

void CanManager_operational(CO_Data* d)
{
    rtapi_print("CanManager_operational\n");

    //This constants are used to start the SYNC signal from the Master LCNC.
    UNS32 SYNC_TIME = 0x07D0;   // 0x03E8 This value is for a 1000 uSeg SYNC cycle. TODO Garcia: this could be a parameter for this component
    UNS32 START_SYNC = 0x40000080;  // Reference for this value "CANOpen Memento of Francis Dupin, August 2009", SYNC configuration.

#ifdef __USE_SYNC__
    UNS32 size = sizeof(UNS32);
    if (sync_enabled) {
        //TODO Garcia: SYNC configurartion could be optional using an sync_enable param. But the transmision mode of the PDOs have to be set according to this.
        //This constant is used to start the SYNC signal from the Master LCNC.
        /*****************************************
         *       Set Master to trasmit SYNCs     *
         *****************************************/
        writeLocalDict( &EPOScontrol_Data, /*CO_Data* d*/
                0x1006, /*UNS16 index*/
                0x00, /*UNS8 subind*/ 
                &SYNC_TIME, /*void * pSourceData,*/ 
                &size, /* UNS8 * pExpectedSize*/
                RW);  /* UNS8 checkAccess */

        writeLocalDict( &EPOScontrol_Data, /*CO_Data* d*/
                0x1005, /*UNS16 index*/
                0x00, /*UNS8 subind*/ 
                &START_SYNC, /*void * pSourceData,*/ 
                &size, /* UNS8 * pExpectedSize*/
                RW);  /* UNS8 checkAccess */
    }
#endif
}

void CanManager_stopped(CO_Data* d)
{
    rtapi_print("CANmanager: CB stopped\n");
}

void CanManager_post_sync(CO_Data* d)
{
//    rtapi_print(" 0x2000:%2.2d 0x2014:%2.2d 0x2015:%2.2d          \r",MasterMapInt32_1, MasterMapInt32_5, MasterMapInt32_6);
}

void CanManager_post_TPDO(CO_Data* d)
{
    rtapi_print("CANmanager: CB TPDO\n");    
}

void CanManager_post_SlaveBootup(CO_Data* d, UNS8 nodeid)
{
    rtapi_print("CANmanager: CB SlaveBootup %x\n", nodeid);
}

void CanManager_post_SlaveStateChange(CO_Data* d, UNS8 nodeid,  e_nodeState newNodeState)
{
    rtapi_print("CANmanager: CB SlaveStateChange %x -> %x\n", nodeid, newNodeState);
}

/***************************  INIT  *****************************************/
void InitNodes(CO_Data* d, UNS32 id)
{
    setState(&EPOScontrol_Data, Initialisation);
}

/***************************  EXIT  *****************************************/
void Exit(CO_Data* d, UNS32 id)
{
    // is this needed? disable for now
    // masterSendNMTstateChange(&EPOScontrol_Data, NMT_MASTER_NODE, NMT_Stop_Node);

    //Stop master
    setState(&EPOScontrol_Data, Stopped);
}


EXTRA_SETUP()
{
    if (!dcf) {
        rtapi_print ("CANmanager: DCF file not provided, unable to load\n");
        return 1;
    }

    canmanager = hal_malloc(sizeof(canmanager_t));
    if (!canmanager)
        return 1;

    // load the params
    int i;
    for (i = 0; i < EPOS_MAX_DRIVES; i++)
        if (slaveid[i] != 0) {
            canmanager->slave_id[canmanager->slavecount++] = slaveid[i];
        }

    int     retcode;

    retcode = hal_param_u32_newf (HAL_RO, &canmanager->slavecount, comp_id,
        "%s.slave-count", prefix);
    if (retcode != 0) { return retcode; }

    // comp_id = already set
    // prefix = the component prefix
    rtapi_print ("Component ID is %d\n", comp_id);

    // create the pins

    for (i = 0; i < canmanager->slavecount; i++) {
        int retcode;

        retcode = hal_pin_float_newf(HAL_IN, &canmanager->position_command[i], comp_id,
        "%s.%d.position-cmd", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_pin_s32_newf(HAL_OUT, &canmanager->position_counts[i], comp_id,
        "%s.%d.counts", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_pin_float_newf(HAL_OUT, &canmanager->position_feedback[i], comp_id,  
        "%s.%d.position-fb", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_param_u32_newf (HAL_RO, &canmanager->slave_id[i], comp_id,
        "%s.%d.slave-id", prefix, i);
        if (retcode != 0) { return retcode; }

        retcode = hal_param_float_newf (HAL_RW, &canmanager->position_scale[i], comp_id,
        "%s.%d.position-scale", prefix, i);
        if (retcode != 0) { return retcode; }

        canmanager->position_scale[i] = 1;
    }

    rtapi_print ("CANmanager: Load libpthread_rt.so\n");
    pthread_lib_handle = dlopen ("libpthread_rt.so", RTLD_NOW | RTLD_GLOBAL);
    if (!pthread_lib_handle) {
        rtapi_print ("CANmanager: pthread_rt load failed\n");
        return 1;
    }

    rtapi_print ("CANmanager: Loading librtdm.so\n");
    rtdm_lib_handle = dlopen ("/usr/lib/librtdm.so", RTLD_NOW | RTLD_GLOBAL);
    if (!rtdm_lib_handle) {
        rtapi_print ("CANmanager: RTDM load failed\n");
        return 1;
    }

    rtapi_print ("CANmanager: Timers initialized\n");
    TimerInit();

    rtapi_print ("CANmanager: Loading the driver\n");
    LoadCanDriver(LibraryPath);
                
    if(!canOpen(&MasterBoard,&EPOScontrol_Data)){
        rtapi_print("CANmanager: Cannot open Master Board\n");
    }
    else{
        rtapi_print("CANmanager: Opened Master Board\n");
    }

    // Set the master ID
    setNodeId(&EPOScontrol_Data, NMT_MASTER_NODE);

    // initialize the master
    epos_initialize_master (&EPOScontrol_Data, dcf);
    //display_dcf_set (&EPOS_drive.dcf_data);
    
    // add the defined slave nodeids
    for (i = 0; i < canmanager->slavecount; i++) {
        rtapi_print ("Adding slave id %02x\n", canmanager->slave_id[i]);
        epos_add_slave (canmanager->slave_id[i]);
    }

    // load the DCF configuration for the master node before starting the timers and such
    ds302_load_dcf_local (&EPOScontrol_Data);

    // set up callbacks
    EPOScontrol_Data.heartbeatError = CanManager_heartbeatError;
    EPOScontrol_Data.initialisation = CanManager_initialisation;
    EPOScontrol_Data.preOperational = CanManager_preOperational;
    EPOScontrol_Data.operational = CanManager_operational;
    EPOScontrol_Data.stopped = CanManager_stopped;
    EPOScontrol_Data.post_sync = CanManager_post_sync;
    EPOScontrol_Data.post_TPDO = CanManager_post_TPDO;
    EPOScontrol_Data.post_SlaveBootup = CanManager_post_SlaveBootup;
    EPOScontrol_Data.post_SlaveStateChange = CanManager_post_SlaveStateChange;
    
    // Start timer thread
    StartTimerLoop(&InitNodes);

    // Init DS302 process
    ds302_init (&EPOScontrol_Data);

    // kickoff DS302 boot process
    EnterMutex();
    ds302_start (&EPOScontrol_Data);
    LeaveMutex();

    rtapi_print("CANmanager: finished initialization.\n");

    return 0;
}


EXTRA_CLEANUP()
{
    // disable the drive
    if (epos_drive_operational(0)) {
        EnterMutex();    
        epos_disable_drive (0);
        sendPDOevent(&EPOScontrol_Data);
        LeaveMutex();
    }
    
    // put the master into pre-op
    setState (&EPOScontrol_Data, Pre_operational);

    // stop the threads and stop the master
    StopTimerLoop(&Exit);

    canClose(&EPOScontrol_Data);
    
    TimerCleanup();

    if (rtdm_lib_handle)
        dlclose (rtdm_lib_handle);
    
    if (pthread_lib_handle)
        dlclose (pthread_lib_handle);


    rtapi_print ("CANmanager: stopped and unloaded\n");
}

int         boot_done = 0;
int         init_done = 0;
INTEGER32   current_position_command = 0;

FUNCTION(update) 
{
    int     i;
    //rtapi_print ("update called\n");

    // do drive startup after the manager completed boot
    if (boot_done == 0 && ds302_status(&EPOScontrol_Data) == BootCompleted) {
            boot_done = 1;

            // set the boot complete param
            boot_complete = 1;

            rtapi_print ("CANmanager: Initialising drives\n");
            EnterMutex();
            
            for (i = 0; i < canmanager->slavecount; i++) {
                // set operation mode
                epos_set_mode (i, EPOS_MODE_PPM);
            
                // set motion type, segmented or continuous
                epos_set_continuous (i);
                //epos_set_segmented(0);
            
                // set values as absolute
                epos_set_absolute (i);
            
                // set execution for commands
                epos_execute (i);

                // enable the drive
                epos_enable_drive (i);
            }

            // load values to the drive via PDO (note, above routines are LOCAL)
            sendPDOevent(&EPOScontrol_Data);

            LeaveMutex();
    } else if (ds302_status(&EPOScontrol_Data) != BootCompleted) {
        // boot is still in progress / not done
        // let's update the boot status for each system
    }

    for (i = 0; i < canmanager->slavecount ; i++) {

        // if we're operational, then do work
        if (epos_drive_operational(i)) {

            // calculate target position
            hal_s32_t   demandpos = (hal_s32_t)(*(canmanager->position_command[i]) * canmanager->position_scale[i]);
            // do motion (we can base comparison on the OD object directly)
            if (demandpos != PositionDemandValue[i]) {
                // new move required
                // rtapi_print ("CANmanager: Executing move to %ld from %ld [%d]\n", demandpos, PositionDemandValue[i], i);

                EnterMutex();
                epos_do_move_PPM(i, demandpos);
                LeaveMutex();
                // if the move succeeds, it will update the PositionDemandValue with the param value
                // this way, we'll re-execute the move automatically if for whatever reason was not executed
            }

            // load the feedback value
            *(canmanager->position_counts[i]) = PositionActualValue[i];

            // calculate position in units
            *(canmanager->position_feedback[i]) = *(canmanager->position_counts[i]) / canmanager->position_scale[i];
        }
    }
}
